// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[],"name":"sayHi","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"message","type":"string"}],"name":"createContract","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"i","type":"uint256"}],"name":"getAddress","outputs":[{"name":"","type":"address"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "60606040526105ba806100126000396000f3606060405260e060020a60003504630c49c36c8114610031578063631a4231146100ad578063b93f9b0a1461024b575b005b600060605260c0604052601660809081527f4675636b20796f752c206d6f746865726675636b65720000000000000000000060a052602060c0908152601660e081905281906101009060a09080838184600060046012f15050815169ffffffffffffffffffff1916909152505060405161012081900392509050f35b608060206004803580820135601f81018490049093028401604052606083815261002f9492936024939192840191819083828082843750506040805160208835808b0135601f8101839004830284018301909452838352979998604498929750919091019450909250829150840183828082843750949650505050505050600082826040516102d5806102e58339018080602001806020018381038352858181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f09050600160005080548060010182818154818355818115116102ab578183600052602060002091820191016102ab91905b808211156102e157600081558401610238565b6102a160043560006001600050828154811015610002575090527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015473ffffffffffffffffffffffffffffffffffffffff1690565b6060908152602090f35b50505091909060005260206000209001600050805473ffffffffffffffffffffffffffffffffffffffff19168317905550505050565b50905660606040526040516102d53803806102d583398101604052805160805190820191018160006000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009a57805160ff19168380011785555b506100ca9291505b808211156101235760008155600101610074565b5050505061017e806101576000396000f35b8280016001018555821561006c579182015b8281111561006c5782518260005055916020019190600101906100ac565b50508060016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012757805160ff19168380011785555b50610088929150610074565b5090565b82800160010185558215610117579182015b8281111561011757825182600050559160200191906001019061013956606060405260e060020a60003504638052474d8114610026578063a1fb1de914610083575b005b6100dd60008054602060026001831615610100026000190190921691909104601f810182900490910260809081016040526060828152929190828280156101765780601f1061014b57610100808354040283529160200191610176565b6100dd6001805460806020601f6002600019610100868816150201909416939093049283018190040281016040526060828152929190828280156101765780601f1061014b57610100808354040283529160200191610176565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161015957829003601f168201915b50505050508156",
    unlinked_binary: "60606040526105ba806100126000396000f3606060405260e060020a60003504630c49c36c8114610031578063631a4231146100ad578063b93f9b0a1461024b575b005b600060605260c0604052601660809081527f4675636b20796f752c206d6f746865726675636b65720000000000000000000060a052602060c0908152601660e081905281906101009060a09080838184600060046012f15050815169ffffffffffffffffffff1916909152505060405161012081900392509050f35b608060206004803580820135601f81018490049093028401604052606083815261002f9492936024939192840191819083828082843750506040805160208835808b0135601f8101839004830284018301909452838352979998604498929750919091019450909250829150840183828082843750949650505050505050600082826040516102d5806102e58339018080602001806020018381038352858181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f09050600160005080548060010182818154818355818115116102ab578183600052602060002091820191016102ab91905b808211156102e157600081558401610238565b6102a160043560006001600050828154811015610002575090527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015473ffffffffffffffffffffffffffffffffffffffff1690565b6060908152602090f35b50505091909060005260206000209001600050805473ffffffffffffffffffffffffffffffffffffffff19168317905550505050565b50905660606040526040516102d53803806102d583398101604052805160805190820191018160006000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009a57805160ff19168380011785555b506100ca9291505b808211156101235760008155600101610074565b5050505061017e806101576000396000f35b8280016001018555821561006c579182015b8281111561006c5782518260005055916020019190600101906100ac565b50508060016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012757805160ff19168380011785555b50610088929150610074565b5090565b82800160010185558215610117579182015b8281111561011757825182600050559160200191906001019061013956606060405260e060020a60003504638052474d8114610026578063a1fb1de914610083575b005b6100dd60008054602060026001831615610100026000190190921691909104601f810182900490910260809081016040526060828152929190828280156101765780601f1061014b57610100808354040283529160200191610176565b6100dd6001805460806020601f6002600019610100868816150201909416939093049283018190040281016040526060828152929190828280156101765780601f1061014b57610100808354040283529160200191610176565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161015957829003601f168201915b50505050508156",
    address: "0x18817e5b4300b4190c54a980609f80e2c28b8a97",
    generated_with: "2.0.9",
    contract_name: "Factory"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Factory error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Factory error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Factory error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Factory error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Factory = Contract;
  }

})();
